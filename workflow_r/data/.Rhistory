y0  <- rnorm(n,sk0*0.2 + a0*delta,1)
w0  <- rnorm(n,sk0*0.2,1)
a1  <- rnorm(n,0.5*a0,1)
sk1 <- rnorm(n,sk0*gamma,1)
x1  <- rnorm(n,0,1)
y1 <-  rnorm(n,sk1*theta + 0.1*x1 + a1*delta + y0*0.3 + w0*beta,1)
# Not controlling for y0 (a confounder) induced upward bias
m2 <- lm(y1 ~ sk1 + y0)
biases <-  c(betas=beta, deltas=delta, gammas=gamma, corw0y1= round(cor(w0,y1),1), cora0y1=round(cor(a0,y1),1), corsk0sk1=cor(sk0,sk1), bias=m2$coefficients["sk1"]/theta-1)
estimates <- rbind(estimates,biases )
}
}
}
estimates %>% as_tibble() %>%
ggplot(aes(x=gammas,  y = bias.sk1, group=interaction(betas,deltas), colour=interaction(betas,deltas)))  +
geom_smooth() + theme_bw()
estimates <- NULL
n=10^4
theta=0.2
for (beta in c(0,1)) {
for (delta in c(0,1)) {
for (gamma in seq(0,1,by=0.01)) {
a0  <- rnorm(n,0,1)
sk0 <- rnorm(n,0,1)
y0  <- rnorm(n,sk0*0.2 + a0*delta,1)
w0  <- rnorm(n,sk0*0.2,1)
a1  <- rnorm(n,0.5*a0,1)
sk1 <- rnorm(n,sk0*gamma,1)
x1  <- rnorm(n,0,1)
y1 <-  rnorm(n,sk1*theta + 0.1*x1 + a1*delta + y0*0.3 + w0*beta,1)
# Not controlling for y0 (a confounder) induced upward bias
m2 <- lm(y1 ~ sk1 + y0)
biases <-  c(betas=beta, deltas=delta, gammas=gamma, corw0y1= round(cor(w0,y1),1), cora0y1=round(cor(a0,y1),1), corsk0sk1=cor(sk0,sk1), bias=m2$coefficients["sk1"]/theta-1)
estimates <- rbind(estimates,biases )
}
}
}
estimates %>% as_tibble() %>%
ggplot(aes(x=gammas,  y = bias.sk1, group=interaction(betas,deltas), colour=interaction(betas,deltas)))  +
geom_smooth() + theme_bw()
bias1
estimates <- NULL
theta=0.2
n=20^3
for (beta in seq(0,2,by=0.01)) {
for (delta in seq(0,2,by=0.01)) {
a0  <- rnorm(n,0,1)
sk0 <- rnorm(n,0,1)
y0  <- rnorm(n,sk0*0.2 + a0*delta,1)
w0  <- rnorm(n,sk0*0.2,1)
a1  <- rnorm(n,0.5*a0,1)
sk1 <- rnorm(n,sk0*0.6,1)
x1  <- rnorm(n,0,1)
y1 <-  rnorm(n,sk1*theta + 0.1*x1 + a1*delta + y0*0.3 + w0*beta,1)
# If it were possibly to control for parent's skin color the relation would be causal
m1 <- lm(y1 ~ sk1 + sk0)
# Controlling for y0 (a collider) induced downward bias
m2 <- lm(y1 ~ sk1 + y0)
# Not controlling for y0 (a confounder) induced upward bias
m3 <- lm(y1 ~ sk1)
betas <-  c(betas=beta, deltas=delta, corw0y1=round(cor(w0,y1),2), cora0y1=round(cor(a0,y1),2), theta_unbiased=m1$coefficients["sk1"]-theta,
theta_downward=m2$coefficients["sk1"]-theta,
theta_upward=m3$coefficients["sk1"]-theta)
estimates <- rbind(estimates,betas)
}
}
colnames(estimates) <- c(paste("Effect of",expression(W[t-1])),
paste("Effect of",expression(A)),
paste("Cor(",expression(W[t-1]),",",expression(Y[t]),")"),
paste("Cor(",expression(A[t-1]),",",expression(Y[t]),")"),
paste("Adjusting for",expression(SC[t-1])),
paste("Adjusting for",expression(Y[t-1])),
paste("Not adjusting for",expression(Y[t-1])))
rwb <- colorRampPalette(c(pal_aaas("lanonc")(2)[2], "white", pal_aaas("lanonc")(2)[1]))
bias1 <- estimates %>% as_tibble() %>% select(-1,-2) %>%
pivot_longer(-c(corw0y1,cora0y1), names_to = "models", values_to = "estimate") %>%
ggplot(aes(x=corw0y1, y=cora0y1, fill = estimate))  +
facet_grid(. ~  models) +
labs(x=expression(paste("Cor(",W[t-1],",",Y[t],")")),y=expression(paste("Cor(",A[t-1],",",Y[t],")")),fill=expression(hat(theta)-theta)) +
geom_raster(interpolate=TRUE) +
scale_fill_gradientn(colors = rwb(200), lim=c(-0.25,0.25)) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
estimates <- NULL
theta=0.2
n=20^3
for (beta in seq(0,2,by=0.01)) {
for (delta in seq(0,2,by=0.01)) {
a0  <- rnorm(n,0,1)
sk0 <- rnorm(n,0,1)
y0  <- rnorm(n,sk0*0.2 + a0*delta,1)
w0  <- rnorm(n,sk0*0.2,1)
a1  <- rnorm(n,0.5*a0,1)
sk1 <- rnorm(n,sk0*0.6,1)
x1  <- rnorm(n,0,1)
y1 <-  rnorm(n,sk1*theta + 0.1*x1 + a1*delta + y0*0.3 + w0*beta,1)
# If it were possibly to control for parent's skin color the relation would be causal
m1 <- lm(y1 ~ sk1 + sk0)
# Controlling for y0 (a collider) induced downward bias
m2 <- lm(y1 ~ sk1 + y0)
# Not controlling for y0 (a confounder) induced upward bias
m3 <- lm(y1 ~ sk1)
betas <-  c(betas=beta, deltas=delta, corw0y1=round(cor(w0,y1),2), cora0y1=round(cor(a0,y1),2), theta_unbiased=(m1$coefficients["sk1"]/theta)-1,
theta_downward=(m2$coefficients["sk1"]/theta)-1,
theta_upward=(m3$coefficients["sk1"]/theta)-1)
estimates <- rbind(estimates,betas)
}
}
xaringan:::inf_mr()
coins200 <- rbinom(10000, size=200, p=0.5)
coins200
mean(coins200)
var(coins200)
coins200 <- rbinom(10000, size=200, p=0.5)
coins200
mean(coins200)
var(coins200)
hist(coins200)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
set.seed(9628525)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
set.seed(9628525)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
set.seed(9628525)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
set.seed(9628525)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
set.seed(9628525)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
set.seed(9628525)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
set.seed(9628525)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
set.seed(9628525)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
set.seed(9628525)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
set.seed(9628525)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
set.seed(9628525)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
set.seed(9628525)
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
mean(coins200)
diff <- mean(coins200)-100
mean(coins200)-100
diff=1
while ( diff<=0.001) {
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
diff <- mean(coins200)-100
}
diff
diff=1
while ( diff<=0.001) {
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
diff <- asb(mean(coins200)-100)
}
diff
diff=1
while ( diff<=0.001) {
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
diff <- abs(mean(coins200)-100)
}
diff
abs(mean(coins200)-100)
diff=0
while (diff<=0.001) {
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
diff <- abs(mean(coins200)-100)
}
diff
mean(coins200)
var(coins200)
diff=0
while (diff<=0.00001) {
coins200 <- rbinom(10000, size=200, p=0.5)
mean(coins200)
var(coins200)
diff <- abs(mean(coins200)-100)
}
mean(coins200)
var(coins200)
n=100
p=0.5
a_sample <- rbinom(n,size=1,prob=p)
a_sample
sum(a_sample)
sum(a_sample)/n
mi_mle = sum(a_sample)/n
mi_mle
p_hat_n = NULL
for (i in 1:1000) {
a_sample <- rbinom(n,size=1,prob=p)
p_hat_n[i] <- mean(a_sample)
}
p_hat_n
mean(p_hat_n)
mi_mle
mean(p_hat_n)
mi_mle
p_hat = sum(a_sample)/n
sd_pha = sqrt((p_hat*(1-p_hat))/n)
sd_pha
p_hat
sd_pha
p_hat_n = NULL
for (i in 1:1000) {
a_sample <- rbinom(n,size=1,prob=p)
p_hat_n[i] <- mean(a_sample)
}
mean(p_hat_n)
p_hat_n
sd(p_hat_n)
sd_pha
install.packages("reprex")
################################################## Pre치mbulo #################################################
# Limpiar pantalla y remover objetos existentes
cat("\014")
rm(list = ls())
# Carga paquetes
library("readstata13")
library("psych")
library("scales")
library("stargazer")
################################################# Directorios #################################################
# Change the line below to set your own working directory
folder <- "/Users/Mauricio/Library/Mobile Documents/com~apple~CloudDocs/Teaching/ISUC/2021_2_data_analysis_r/repo/slides/class_4/workflow/"
dircode     <- paste0(folder,"code/")
dirdata 	  <- paste0(folder,"data/")
dirresults  <- paste0(folder,"results/");  dirresults
################################################## Pre치mbulo #################################################
# Limpiar pantalla y remover objetos existentes
cat("\014")
rm(list = ls())
# Carga paquetes
library("readstata13")
library("psych")
library("scales")
library("stargazer")
################################################# Directorios #################################################
# Change the line below to set your own working directory
folder <- "/Users/Mauricio/Library/Mobile Documents/com~apple~CloudDocs/Teaching/ISUC/2021_2_data_analysis_r/repo/slides/class_4/workflow/"
dircode     <- paste0(folder,"code/")
dirdata 	  <- paste0(folder,"data/")
dirresults  <- paste0(folder,"results/");  dirresults
############################################# Importar datos #################################################
# Set working directory
getwd()
setwd(dirdata)
getwd()
essdata <- read.dta13("ESS8_subset.dta", convert.factors=FALSE); essdata
########################################## Exploraci칩n de datos ##############################################
# Llama otro R script que contiene an치lisis.
# Organizar el trabajo de esta manera permite que el c칩digo sea m치s legible y manejable.
# Establece el directorio de trabajo correspondiente
setwd(dircode)
source("2_exploration.R")
############################################ Recodificaci칩n #################################################
# Establece el directorio de trabajo correspondiente
setwd(dircode)
source("3_recoding.R")
############################################## Data analysis #################################################
# Set working directory
setwd(dircode)
source("4_analyses.R")
plot(jitter(essdata$eisced,1), jitter(essdata$hinctnta,1), pch=16, col="blue")
essdata$eisced <- ifelse(essdata$eisced==55, NA, essdata$eisced)
plot(jitter(essdata$eisced,1), jitter(essdata$hinctnta,1), pch=16, col="blue")
plot(jitter(essdata$eisced,1), jitter(essdata$hinctnta,1), pch=1, col="blue")
plot(jitter(essdata$eisced,1), jitter(essdata$hinctnta,1), col = rgb(red = 1, green = 0, blue = 0, alpha = 0.5),
pch = 16, cex = 4)
plot(jitter(essdata$eisced,1), jitter(essdata$hinctnta,1), col = rgb(red = 0, green = 0, blue = 1, alpha = 0.1),
pch = 16)
plot(jitter(essdata$eisced,2), jitter(essdata$hinctnta,2), pch=16, col="blue")
plot(jitter(essdata$eisced,1), jitter(essdata$hinctnta,2), col = rgb(red = 0, green = 0, blue = 2, alpha = 0.05),
pch = 16)
plot(jitter(essdata$eisced,1), jitter(essdata$hinctnta,2), col = rgb(red = 0, green = 0, blue = 1, alpha = 0.05),
pch = 16)
plot(essdata$eisced, essdata$hinctnta)
plot(jitter(essdata$eisced,2), jitter(essdata$hinctnta,2), pch=16, col="blue")
plot(jitter(essdata$eisced,1), jitter(essdata$hinctnta,2), col = rgb(red = 0, green = 0, blue = 1, alpha = 0.05),
pch = 16)
unique(essdata$eisced)
essdata$eisced <- ifelse(essdata$eisced==55, NA, essdata$eisced)
plot(essdata$eisced, essdata$hinctnta)
plot(jitter(essdata$eisced,2), jitter(essdata$hinctnta,2), pch=16, col="blue")
plot(jitter(essdata$eisced,1), jitter(essdata$hinctnta,2), col = rgb(red = 0, green = 0, blue = 1, alpha = 0.05),
pch = 16)
countries <- unique(essdata$cntry)
for (c in countries) {
data_country <- essdata[essdata$cntry==c,]
abline(lm(hinctnta ~ eisced, data=data_country, col="red"))
}
for (c in countries) {
data_country <- essdata[essdata$cntry==c,]
abline(lm(hinctnta ~ eisced, data=data_country), col="red")
}
hist(essdata$eisced)
# plot derecha
hist(essdata$eisced, col="green")
plot(jitter(essdata$eisced,1), jitter(essdata$hinctnta,2), col = rgb(red = 0, green = 0, blue = 1, alpha = 0.05),
pch = 16,xlab="Education", ylab="Income")
plot(jitter(essdata$eisced,2), jitter(essdata$hinctnta,2), pch=16, col="blue", xlab="Education", ylab="Income")
unique(essdata$eisced)
essdata$eisced <- ifelse(essdata$eisced==55, NA, essdata$eisced)
plot(essdata$eisced, essdata$hinctnta)
plot(jitter(essdata$eisced,2), jitter(essdata$hinctnta,2), pch=16, col="blue", xlab="Education", ylab="Income")
plot(jitter(essdata$eisced,1), jitter(essdata$hinctnta,2), col = rgb(red = 0, green = 0, blue = 1, alpha = 0.05),
pch = 16,xlab="Education", ylab="Income")
countries <- unique(essdata$cntry)
for (c in countries) {
data_country <- essdata[essdata$cntry==c,]
abline(lm(hinctnta ~ eisced, data=data_country), col="red")
}
names(model2)
#################### Basic data analysis  ####################
# descriptives
mean(essdata_sub$age, na.rm = T)
sd(essdata_sub$age, na.rm = T)
table(essdata_sub$gndr_string)
sapply(essdata_sub[,c("eisced", "age")], mean, na.rm=TRUE)
sapply(essdata_sub[,c("eisced", "age")], sd, na.rm=TRUE)
# by group
summary_table <- describeBy(essdata_sub[,c("eisced", "age")], essdata_sub$cntry)
#################### Plots  ####################
dev.off()
filename <- paste0(dirresults,"miprimerplot.jpeg")
jpeg(file=filename, width=600, height=350)
par(mfrow=c(1,2))
# plot izquierda
unique(essdata$eisced)
essdata$eisced <- ifelse(essdata$eisced==55, NA, essdata$eisced)
plot(essdata$eisced, essdata$hinctnta)
#plot(jitter(essdata$eisced,2), jitter(essdata$hinctnta,2), pch=16, col="blue", xlab="Education", ylab="Income")
#plot(jitter(essdata$eisced,1), jitter(essdata$hinctnta,2), col = rgb(red = 0, green = 0, blue = 1, alpha = 0.05),
#     pch = 16,xlab="Education", ylab="Income")
countries <- unique(essdata$cntry)
for (c in countries) {
data_country <- essdata[essdata$cntry==c,]
abline(lm(hinctnta ~ eisced, data=data_country), col="red")
}
# plot derecha
hist(essdata$eisced, col="green")
dev.off()
################ Modelos de Regresi칩n ##################
# Fit linear model
model1 <- lm(eisced ~ age + factor(gndr_string), data=essdata_sub); model1
# Update modelo existente
model2 <- update(model1, . ~ . + factor(gndr_string)*age); model2
# acceder al output
names(model2)
model2$coefficients
model2$residuals
# summary del modelo
sum_model2 <- summary(model2); sum_model2
names(sum_model2)
sum_model2$r.squared
sum_model2$sigma
# exportar resultados a una linda tabla
filename <- paste0(dirresults,"miprimeratabladeregresion.txt")
stargazer(model1, model2, type="text",
covariate.labels=c("Age","Gender (Male=1)", "Gender*Age","Intercep"),
dep.var.labels=c("Education","Education"),
out=filename)
print("================ AN츼LISIS LISTOS !!!! ====================") # Debugging flags
################################################## Pre치mbulo #################################################
# Limpiar pantalla y remover objetos existentes
cat("\014")
rm(list = ls())
# Carga paquetes
library("readstata13")
library("tidyverse")
################################################# Directorios #################################################
# Change the line below to set your own working directory
folder <- "/Users/Mauricio/Library/Mobile Documents/com~apple~CloudDocs/Teaching/ISUC/2023_1_workshop_workflow/workflow_r/"
dircode     <- paste0(folder,"code/")
dirdata 	  <- paste0(folder,"data/")
dirresults  <- paste0(folder,"results/");  dirresults
############################################# Importar datos #################################################
# Set working directory
getwd()
setwd(dirdata)
getwd()
essdata <- read.dta13("sample_casen2017.dta", convert.factors=FALSE); essdata
mydata <- read.dta13("sample_casen2017.dta", convert.factors=FALSE)
################################################## Pre치mbulo #################################################
# Limpiar pantalla y remover objetos existentes
cat("\014")
rm(list = ls())
# Carga paquetes
library("readstata13")
library("tidyverse")
################################################# Directorios #################################################
# Change the line below to set your own working directory
folder <- "/Users/Mauricio/Library/Mobile Documents/com~apple~CloudDocs/Teaching/ISUC/2023_1_workshop_workflow/workflow_r/"
dircode     <- paste0(folder,"code/")
dirdata 	  <- paste0(folder,"data/")
dirresults  <- paste0(folder,"results/");  dirresults
############################################# Importar datos #################################################
# Set working directory
getwd()
setwd(dirdata)
getwd()
mydata <- read.dta13("sample_casen2017.dta", convert.factors=FALSE)
iris
iris  %>% mutate(fold = nsample(1:2))
?sample
iris  %>% mutate(fold = sample(c(1,2), n(), replace = TRUE))
iris  %>% mutate(fold = sample(c("trainning","testing"), n(), replace = TRUE))
iris  %>% mutate(fold = sample(1:5, n(), replace = TRUE))
iris  <- iris  %>% mutate(fold = sample(1:5, n(), replace = TRUE))
iris
################################################## Pre치mbulo #################################################
# Limpiar pantalla y remover objetos existentes
cat("\014")
rm(list = ls())
# Carga paquetes
library("readstata13")
library("tidyverse")
################################################# Directorios #################################################
# Change the line below to set your own working directory
folder <- "/Users/Mauricio/Library/Mobile Documents/com~apple~CloudDocs/Teaching/ISUC/2023_1_workshop_workflow/workflow_r/"
dircode     <- paste0(folder,"code/")
dirdata 	  <- paste0(folder,"data/")
dirresults  <- paste0(folder,"results/");  dirresults
############################################# Importar datos #################################################
# Set working directory
setwd(dirdata)
mydata <- read.dta13("sample_casen2017.dta", convert.factors=FALSE)
mydata %>% glimpse()
